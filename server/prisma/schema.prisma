generator client {
   provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
}

model Account {
  accountId      String  @id @default(uuid())
  email   String
  phoneNumber Int
  user User?
  enabled Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  passwordHistories PasswordHistories[]
  @@unique([accountId, email, phoneNumber])
}

model User {
  userId   String  @id @default(uuid())
  // username String
  // password String
  account   Account @relation(fields: [accountId, email, phoneNumber], references: [accountId, email, phoneNumber])
  accountId String
  name String
  email String
  phoneNumber Int
  deActivatedOn DateTime
  createdOn DateTime @default(now())
  updatedOn DateTime
  role Role
  student Student?
  instructor Instructor?
  moderator Moderator?
  administrator Administrators?
  token RefreshTokens?

  @@unique([accountId, email, phoneNumber])
}

model Student{
  studentId String @id @default(uuid())
  user   User @relation(fields: [userId], references: [userId])
  userId String
  @@unique([userId])
}

model Instructor{
  instructorId String @id @default(uuid())
  user User @relation(fields: [userId], references: [userId])
  userId String
  @@unique([userId])
}

model Moderator{
  moderatorId String @id @default(uuid())
  user User @relation(fields: [userId], references: [userId])
  userId String
  @@unique([userId])
}

model Administrators{
  administratorId String @id @default(uuid())
  user User @relation(fields: [userId], references: [userId])
  userId String
  @@unique([userId])
}

model Course{
  courseId String @id @default(uuid())
  courseName String
  duration DateTime @db.Time
  price Int
  description String
  language Language
  status Status
  approvalStatus Status
  createdOn DateTime @default(now())
  updatedOn DateTime
  // missing UserId, topics, approved by
}

model CourseMaterial {
  courseMaterialId String @id @default(uuid())
  url String
  // missing course id
}

model Transaction {
  paymentId String @id @default(uuid())
  status Status
  createdOn DateTime @default(now())
  // missing userid
}

model Topics {
  topicId String @id
  topicName String
  description String
}

// model ClientAccounts {
//   id            String @id @default(uuid())
//   firstName     String
//   lastName      String
//   contactNumber Int
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   account   Accounts @relation(fields: [accountId], references: [id])
//   accountId String   @unique
// }

// model AdminAccounts {
//   id        String   @id @default(uuid())
//   account   Accounts @relation(fields: [accountId], references: [id])
//   accountId String   @unique
//   firstName String
//   lastName  String
//   createdAt DateTime   @default(now())
//   updatedAt DateTime   @updatedAt
//   Products  Products[]
// }

model PasswordHistories {
  id           String  @id @default(uuid())
  passwordHash String
  enabled      Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Accounts   Account @relation(fields: [accountsId], references: [accountId])
  accountsId String
  @@unique([accountsId, passwordHash])
}

model RefreshTokens {
  tokenId String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiredAt DateTime
  user User @relation(fields: [userId], references: [userId])
  userId String   @unique
  
}

// model Products {
//   id          String @id @default(uuid())
//   name        String @unique
//   description String
//   quantity    Int    @default(1)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   createdBy   AdminAccounts @relation(fields: [createdById], references: [id])
//   createdById String
// }

enum Role {
  User
  Student
  Instructor
  Moderator
  Employees
  Administrators
}

enum Language {
  Chinese
  English
  French
  Indian
  Japanese
  Korean
  Malay
}

enum Status {
  InProgress
  Pending
  Completed
  Approved
  Ongoing
  Started
}